#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
INSTALL_DIR="$HOME/unichain-node"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
print_header() {
    clear
    echo -e "${CYAN}================================================${NC}"
    echo -e "${CYAN}       ü¶Ñ Unichain Node Installation ü¶Ñ${NC}"
    echo -e "${CYAN}  DeFi-native Ethereum L2 Node Setup${NC}"
    echo -e "${CYAN}================================================${NC}"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
print_success() {
    echo -e "${GREEN}‚úì $1${NC}"
}

print_error() {
    echo -e "${RED}‚úó $1${NC}"
}

print_info() {
    echo -e "${YELLOW}‚ûú $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö† $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
check_requirements() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    echo ""
    
    # CPU
    CPU_CORES=$(nproc)
    if [ $CPU_CORES -ge 4 ]; then
        print_success "CPU: $CPU_CORES —è–¥–µ—Ä (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 4+)"
    else
        print_warning "CPU: $CPU_CORES —è–¥–µ—Ä (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 4+)"
    fi
    
    # RAM
    RAM_GB=$(free -g | awk '/^Mem:/{print $2}')
    if [ $RAM_GB -ge 8 ]; then
        print_success "RAM: ${RAM_GB}GB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 8GB+)"
    else
        print_warning "RAM: ${RAM_GB}GB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 8GB+)"
    fi
    
    # Disk
    DISK_GB=$(df -BG / | awk 'NR==2 {print $4}' | sed 's/G//')
    if [ $DISK_GB -ge 100 ]; then
        print_success "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: ${DISK_GB}GB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 100GB+)"
    else
        print_warning "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: ${DISK_GB}GB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 100GB+)"
    fi
    
    echo ""
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
update_system() {
    print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    sudo apt update -y && sudo apt upgrade -y
    sudo apt install -y ca-certificates curl gnupg lsb-release git wget jq screen
    print_success "–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
install_docker() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker..."
    
    if command -v docker &> /dev/null; then
        print_success "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        docker --version
        return 0
    fi
    
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
    for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do 
        sudo apt-get remove -y $pkg 2>/dev/null
    done
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
    sudo apt install -y docker.io
    
    # –ó–∞–ø—É—Å–∫ –∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ Docker
    sudo systemctl start docker
    sudo systemctl enable docker
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
    sudo groupadd docker 2>/dev/null
    sudo usermod -aG docker $USER
    
    print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    print_warning "–í—ã–ø–æ–ª–Ω–∏—Ç–µ 'newgrp docker' –∏–ª–∏ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
install_docker_compose() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Compose..."
    
    if docker compose version &> /dev/null; then
        print_success "Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        docker compose version
        return 0
    fi
    
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
    VER=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep tag_name | cut -d '"' -f 4)
    
    if [ -z "$VER" ]; then
        VER="v2.20.2"
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è $VER"
    fi
    
    sudo curl -L "https://github.com/docker/compose/releases/download/$VER/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–ª–∏–Ω–∫–∞ –¥–ª—è docker compose
    sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
    
    print_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    docker-compose --version
}

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Unichain
clone_unichain_repo() {
    print_info "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Unichain Node..."
    
    if [ -d "$INSTALL_DIR" ]; then
        print_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $INSTALL_DIR —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        read -p "–£–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/n): " REINSTALL
        if [[ "$REINSTALL" == "y" || "$REINSTALL" == "Y" ]]; then
            print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–æ–¥—ã..."
            cd "$INSTALL_DIR" && docker-compose down 2>/dev/null
            cd ~
            rm -rf "$INSTALL_DIR"
        else
            cd "$INSTALL_DIR"
            return 0
        fi
    fi
    
    git clone https://github.com/Uniswap/unichain-node.git "$INSTALL_DIR"
    
    if [ $? -eq 0 ]; then
        print_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"
        cd "$INSTALL_DIR"
        return 0
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        return 1
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ RPC —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
configure_rpc() {
    local NETWORK=$1
    local ENV_FILE=""
    
    if [ "$NETWORK" == "mainnet" ]; then
        ENV_FILE=".env.mainnet"
    else
        ENV_FILE=".env.sepolia"
    fi
    
    cd "$INSTALL_DIR"
    
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ RPC —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è $NETWORK..."
    echo ""
    
    print_info "–í–∞–º –Ω—É–∂–Ω—ã L1 Ethereum RPC —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:"
    print_info "1. Ethereum Execution Layer RPC (OP_NODE_L1_ETH_RPC)"
    print_info "2. Ethereum Beacon Chain RPC (OP_NODE_L1_BEACON)"
    echo ""
    
    # –ü—É–±–ª–∏—á–Ω—ã–µ RPC –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if [ "$NETWORK" == "sepolia" ]; then
        DEFAULT_ETH_RPC="https://ethereum-sepolia-rpc.publicnode.com"
        DEFAULT_BEACON_RPC="https://ethereum-sepolia-beacon-api.publicnode.com"
    else
        DEFAULT_ETH_RPC="https://ethereum-rpc.publicnode.com"
        DEFAULT_BEACON_RPC="https://ethereum-beacon-api.publicnode.com"
    fi
    
    print_info "–ü—É–±–ª–∏—á–Ω—ã–µ RPC –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:"
    echo "  ETH RPC: $DEFAULT_ETH_RPC"
    echo "  Beacon RPC: $DEFAULT_BEACON_RPC"
    echo ""
    
    read -p "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ RPC? (y/n): " USE_PUBLIC
    
    if [[ "$USE_PUBLIC" == "y" || "$USE_PUBLIC" == "Y" ]]; then
        ETH_RPC="$DEFAULT_ETH_RPC"
        BEACON_RPC="$DEFAULT_BEACON_RPC"
        print_success "–ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø—É–±–ª–∏—á–Ω—ã–µ RPC"
    else
        read -p "–í–≤–µ–¥–∏—Ç–µ Ethereum L1 Execution RPC URL: " ETH_RPC
        read -p "–í–≤–µ–¥–∏—Ç–µ Ethereum L1 Beacon RPC URL: " BEACON_RPC
    fi
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ .env —Ñ–∞–π–ª–∞
    if [ -f "$ENV_FILE" ]; then
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ RPC —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        sed -i "s|^OP_NODE_L1_ETH_RPC=.*|OP_NODE_L1_ETH_RPC=$ETH_RPC|" "$ENV_FILE"
        sed -i "s|^OP_NODE_L1_BEACON=.*|OP_NODE_L1_BEACON=$BEACON_RPC|" "$ENV_FILE"
        print_success "RPC —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ $ENV_FILE"
    else
        print_error "–§–∞–π–ª $ENV_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ docker-compose –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏
configure_network() {
    local NETWORK=$1
    cd "$INSTALL_DIR"
    
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ docker-compose.yml –¥–ª—è —Å–µ—Ç–∏: $NETWORK..."
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º docker-compose.yml –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ nano
    print_warning "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Ä—É—á–Ω—É—é –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å docker-compose.yml"
    echo ""
    print_info "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:"
    print_info "1. –ù–∞–π–¥–∏—Ç–µ —Å–µ–∫—Ü–∏—é 'execution-client:' –∏ 'env_file:'"
    print_info "2. –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ (—É–±–µ—Ä–∏—Ç–µ #) –ø–µ—Ä–µ–¥ –Ω—É–∂–Ω–æ–π —Å–µ—Ç—å—é:"
    
    if [ "$NETWORK" == "mainnet" ]; then
        print_info "   - .env.mainnet  (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É)"
        print_info "   # - .env.sepolia  (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É)"
    else
        print_info "   - .env.sepolia  (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É)"
        print_info "   # - .env.mainnet  (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É)"
    fi
    
    print_info "3. –¢–æ –∂–µ —Å–∞–º–æ–µ –¥–ª—è —Å–µ–∫—Ü–∏–∏ 'op-node:' –∏ 'env_file:'"
    print_info "4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ: Ctrl+X, –∑–∞—Ç–µ–º Y, –∑–∞—Ç–µ–º Enter"
    echo ""
    
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä..."
    nano docker-compose.yml
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if docker-compose config > /dev/null 2>&1; then
        print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞!"
        return 0
    else
        print_error "–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!"
        print_info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd $INSTALL_DIR && docker-compose config"
        return 1
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Unichain –Ω–æ–¥—ã
install_unichain_node() {
    print_header
    echo -e "${BLUE}–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:${NC}"
    echo ""
    echo "  1) Mainnet (–û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç—å)"
    echo "  2) Sepolia (–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å)"
    echo "  0) –ù–∞–∑–∞–¥"
    echo ""
    read -p "–í–∞—à –≤—ã–±–æ—Ä: " network_choice
    
    case $network_choice in
        1)
            NETWORK="mainnet"
            ;;
        2)
            NETWORK="sepolia"
            ;;
        0)
            return 0
            ;;
        *)
            print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            sleep 2
            return 1
            ;;
    esac
    
    echo ""
    check_requirements
    
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? (y/n): " CONTINUE
    if [[ "$CONTINUE" != "y" && "$CONTINUE" != "Y" ]]; then
        return 0
    fi
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    update_system
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
    install_docker
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
    install_docker_compose
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ docker
    print_info "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ docker..."
    newgrp docker << END
    echo "–ü—Ä–∞–≤–∞ docker –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
END
    
    # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    clone_unichain_repo
    if [ $? -ne 0 ]; then
        return 1
    fi
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ RPC
    configure_rpc "$NETWORK"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∏ –≤ docker-compose
    configure_network "$NETWORK"
    
    echo ""
    print_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    print_info "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é 2 –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
}

# –ó–∞–ø—É—Å–∫ –Ω–æ–¥—ã
start_node() {
    if [ ! -d "$INSTALL_DIR" ]; then
        print_error "–ù–æ–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
        print_info "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–¥—É (–æ–ø—Ü–∏—è 1)"
        return 1
    fi
    
    cd "$INSTALL_DIR"
    
    print_info "–ó–∞–ø—É—Å–∫ Unichain –Ω–æ–¥—ã..."
    docker-compose up -d
    
    if [ $? -eq 0 ]; then
        print_success "–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!"
        echo ""
        sleep 3
        docker-compose ps
        echo ""
        print_info "–ù–æ–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å —Å–µ—Ç—å—é. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è."
        print_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é 4 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–æ–¥—ã"
        print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: cd $INSTALL_DIR && docker-compose logs"
        return 1
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã
stop_node() {
    if [ ! -d "$INSTALL_DIR" ]; then
        print_error "–ù–æ–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
        return 1
    fi
    
    cd "$INSTALL_DIR"
    
    print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Unichain –Ω–æ–¥—ã..."
    docker-compose down
    
    if [ $? -eq 0 ]; then
        print_success "–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–æ–¥—ã"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã
check_node_status() {
    if [ ! -d "$INSTALL_DIR" ]; then
        print_error "–ù–æ–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
        return 1
    fi
    
    cd "$INSTALL_DIR"
    
    echo ""
    print_info "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    echo ""
    docker-compose ps
    
    echo ""
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ JSON-RPC —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞..."
    echo ""
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    RESPONSE=$(curl -s -d '{"id":1,"jsonrpc":"2.0","method":"eth_blockNumber","params":[]}' \
        -H "Content-Type: application/json" http://localhost:8545)
    
    if [ -n "$RESPONSE" ]; then
        BLOCK_HEX=$(echo $RESPONSE | jq -r '.result' 2>/dev/null)
        if [ "$BLOCK_HEX" != "null" ] && [ -n "$BLOCK_HEX" ]; then
            BLOCK_NUM=$(printf "%d\n" $BLOCK_HEX 2>/dev/null)
            print_success "–ù–æ–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç! –¢–µ–∫—É—â–∏–π –±–ª–æ–∫: $BLOCK_NUM"
        else
            print_warning "–ù–æ–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –µ—â–µ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
        fi
        echo ""
        print_info "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞:"
        echo 'curl -d '"'"'{"id":1,"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["latest",false]}'"'"' -H "Content-Type: application/json" http://localhost:8545'
    else
        print_warning "–ù–æ–¥–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∏–ª–∏ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞"
        print_info "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
    fi
    echo ""
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
view_logs() {
    if [ ! -d "$INSTALL_DIR" ]; then
        print_error "–ù–æ–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
        return 1
    fi
    
    cd "$INSTALL_DIR"
    
    echo ""
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤:"
    echo ""
    echo "  1) execution-client (Geth)"
    echo "  2) op-node (OP Stack)"
    echo "  3) –í—Å–µ –ª–æ–≥–∏"
    echo "  0) –ù–∞–∑–∞–¥"
    echo ""
    read -p "–í–∞—à –≤—ã–±–æ—Ä: " log_choice
    
    case $log_choice in
        1)
            print_info "–õ–æ–≥–∏ execution-client (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
            docker logs -f unichain-node-execution-client-1
            ;;
        2)
            print_info "–õ–æ–≥–∏ op-node (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
            docker logs -f unichain-node-op-node-1
            ;;
        3)
            print_info "–í—Å–µ –ª–æ–≥–∏ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
            docker-compose logs -f
            ;;
        0)
            return 0
            ;;
        *)
            print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            ;;
    esac
}

# –ü–æ–∫–∞–∑–∞—Ç—å nodekey (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–æ–¥—ã)
show_nodekey() {
    if [ ! -d "$INSTALL_DIR" ]; then
        print_error "–ù–æ–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
        return 1
    fi
    
    cd "$INSTALL_DIR"
    
    NODEKEY_FILE="geth-data/geth/nodekey"
    
    if [ -f "$NODEKEY_FILE" ]; then
        print_warning "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤–∞—à–µ–π –Ω–æ–¥—ã!"
        print_warning "–•—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –Ω–∏–∫–æ–º—É –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ!"
        echo ""
        read -p "–ü–æ–∫–∞–∑–∞—Ç—å Node Key? (yes/no): " CONFIRM
        
        if [ "$CONFIRM" == "yes" ]; then
            echo ""
            print_info "Node Key:"
            cat "$NODEKEY_FILE"
            echo ""
            echo ""
            print_info "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!"
        else
            print_info "–û—Ç–º–µ–Ω–µ–Ω–æ"
        fi
    else
        print_error "–§–∞–π–ª nodekey –Ω–µ –Ω–∞–π–¥–µ–Ω"
        print_info "–í–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–¥–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞"
    fi
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
update_node() {
    if [ ! -d "$INSTALL_DIR" ]; then
        print_error "–ù–æ–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
        return 1
    fi
    
    print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Unichain –Ω–æ–¥—ã..."
    
    cd "$INSTALL_DIR"
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã
    print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã..."
    docker-compose down
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    print_info "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π..."
    git pull origin main
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤
    print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤..."
    docker-compose pull
    
    # –ó–∞–ø—É—Å–∫ –Ω–æ–¥—ã
    print_info "–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –Ω–æ–¥—ã..."
    docker-compose up -d
    
    print_success "–ù–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞!"
}

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
remove_node() {
    print_warning "‚ö†Ô∏è  –≠—Ç–æ —É–¥–∞–ª–∏—Ç –Ω–æ–¥—É –∏ –≤—Å–µ –µ—ë –¥–∞–Ω–Ω—ã–µ!"
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (yes/no): " CONFIRM
    
    if [ "$CONFIRM" != "yes" ]; then
        print_info "–û—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    fi
    
    if [ -d "$INSTALL_DIR" ]; then
        print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã..."
        cd "$INSTALL_DIR"
        docker-compose down -v
        cd ~
        
        print_info "–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..."
        rm -rf "$INSTALL_DIR"
        
        read -p "–£–¥–∞–ª–∏—Ç—å —Ç–∞–∫–∂–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–¥—ã –≤ geth-data? (y/n): " DELETE_DATA
        if [[ "$DELETE_DATA" == "y" || "$DELETE_DATA" == "Y" ]]; then
            rm -rf "$INSTALL_DIR/geth-data"
            print_success "–î–∞–Ω–Ω—ã–µ –Ω–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã"
        fi
        
        print_success "–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
    else
        print_error "–ù–æ–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–µ
show_node_info() {
    if [ ! -d "$INSTALL_DIR" ]; then
        print_error "–ù–æ–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
        return 1
    fi
    
    cd "$INSTALL_DIR"
    
    echo ""
    print_info "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Unichain –Ω–æ–¥–µ:"
    echo ""
    
    echo -e "${CYAN}–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:${NC} $INSTALL_DIR"
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ç–∏
    if grep -v "^#" docker-compose.yml | grep -q ".env.mainnet" 2>/dev/null; then
        echo -e "${CYAN}–°–µ—Ç—å:${NC} Mainnet"
    elif grep -v "^#" docker-compose.yml | grep -q ".env.sepolia" 2>/dev/null; then
        echo -e "${CYAN}–°–µ—Ç—å:${NC} Sepolia (Testnet)"
    else
        echo -e "${CYAN}–°–µ—Ç—å:${NC} –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    fi
    
    # –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    if [ -d "geth-data" ]; then
        SIZE=$(du -sh geth-data 2>/dev/null | cut -f1)
        echo -e "${CYAN}–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:${NC} $SIZE"
    fi
    
    echo ""
    echo -e "${CYAN}–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:${NC}"
    echo "  JSON-RPC: http://localhost:8545"
    echo "  WebSocket: ws://localhost:8546"
    
    echo ""
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu() {
    while true; do
        print_header
        echo "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        echo ""
        echo "  üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞:"
        echo "    1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Unichain –Ω–æ–¥—É"
        echo ""
        echo "  üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
        echo "    2) –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É"
        echo "    3) –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É"
        echo ""
        echo "  üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
        echo "    4) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–æ–¥—ã"
        echo "    5) –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏"
        echo "    6) –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–µ"
        echo ""
        echo "  üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:"
        echo "    7) –ü–æ–∫–∞–∑–∞—Ç—å Node Key (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á)"
        echo "    8) –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É"
        echo "    9) –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É"
        echo ""
        echo "    0) –í—ã—Ö–æ–¥"
        echo ""
        read -p "–í–∞—à –≤—ã–±–æ—Ä: " choice
        
        case $choice in
            1)
                install_unichain_node
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            2)
                start_node
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            3)
                stop_node
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            4)
                check_node_status
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            5)
                view_logs
                ;;
            6)
                show_node_info
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            7)
                show_nodekey
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            8)
                update_node
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            9)
                remove_node
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            0)
                print_info "–í—ã—Ö–æ–¥..."
                exit 0
                ;;
            *)
                print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
                sleep 2
                ;;
        esac
    done
}

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu
